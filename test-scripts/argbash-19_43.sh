#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([device],[d],[Device that will be formatted])
# ARG_OPTIONAL_SINGLE([size],[s],[Size of boot/rescue partition])
# ARG_OPTIONAL_SINGLE([mount],[m],[Directory that will be used to mount devices and images])
# ARG_OPTIONAL_SINGLE([image],[i],[Image with pre-system content])
# ARG_HELP([This script format and install a minimal system on the device to be able to install GRUB and rescue system])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='dsmih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_device=
_arg_size=
_arg_mount=
_arg_image=


print_help()
{
	printf '%s\n' "This script format and install a minimal system on the device to be able to install GRUB and rescue system"
	printf 'Usage: %s [-d|--device <arg>] [-s|--size <arg>] [-m|--mount <arg>] [-i|--image <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-d, --device: Device that will be formatted (no default)"
	printf '\t%s\n' "-s, --size: Size of boot/rescue partition (no default)"
	printf '\t%s\n' "-m, --mount: Directory that will be used to mount devices and images (no default)"
	printf '\t%s\n' "-i, --image: Image with pre-system content (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-d|--device)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_device="$2"
				shift
				;;
			--device=*)
				_arg_device="${_key##--device=}"
				;;
			-d*)
				_arg_device="${_key##-d}"
				;;
			-s|--size)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_size="$2"
				shift
				;;
			--size=*)
				_arg_size="${_key##--size=}"
				;;
			-s*)
				_arg_size="${_key##-s}"
				;;
			-m|--mount)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_mount="$2"
				shift
				;;
			--mount=*)
				_arg_mount="${_key##--mount=}"
				;;
			-m*)
				_arg_mount="${_key##-m}"
				;;
			-i|--image)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_image="$2"
				shift
				;;
			--image=*)
				_arg_image="${_key##--image=}"
				;;
			-i*)
				_arg_image="${_key##-i}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


echo "Value of --device: $_arg_device"
echo "Value of --size: $_arg_size"
echo "Value of --mount: $_arg_mount"
echo "Value of --image: $_arg_image"

# ] <-- needed because of Argbash
